KDay0================================================================

== 问题描述 ==
    尝试Karrigell(下载地址为: http://sourceforge.net/project/showfiles.php?group_id=67940&package_id=218276&release_id=591626). 下载Karrigell解压后, 在终端中进入Karrigell所在目录, 运行python Karrigell.py, 看看出现什么?再在浏览器中输入localhost, 再看看出现什么?

== 解答 ==
运行python Karrigell.py后,若出现
情况1:
shengyan@LIZZIE:~/obp/KDays/Karrigell-2.4.0$ python Karrigell.py 
Address already in use
Another server is running at address ,80...
解决方法:
这是因为Karrigell默认的80端口已被其他程序占用, 所以需修改conf/Karrigell.ini文件中Server字段的port值为8081(即把对应行的注释去掉), 再次运行Karrigell.py可以看到如下. 

情况2:
shengyan@LIZZIE:~/obp/KDays/Karrigell-2.4.0$ python Karrigell.py 
Karrigell 2.4.0 running on port 8081
Press Ctrl+C to stop
这个表明成功开启Karrigell服务.

现在就可以在浏览器地址栏中输入localhost测试默认站点, 当第一次进入时会转入login页面进行登录, 输入用户名和密码后, 即可进入Karrigell文档首页, 里面有很多有用的资料哦, 读者可以看看. 

KDay1================================================================
#.ini文件和部署环境, 简单的例子

== 问题描述 ==
    经过这一节的学习, 熟悉Karrigell.ini基本设置和基本环境部署后, 创建一个自己的站点(mysite), 并依次实现以下功能: 
    (1) 在首页(index.pih)中输出Hello, Karrigell's world!
    (2) 添加一个登录页(login.pih), 用户输入姓名, 密码后进入首页, 并在首页中输出Hello, 姓名's world!

== 解答 ==
    (1) 在Karrigell所在的webapps目录下新建mysite, 或者不在webapps中新建, 再设置.ini的Aliase, 在这略; 
    (2) 在mysite下创建index.pih, 内容见源码, 主要是输出操作;
    (3) 运行python Karrigell.py, 在浏览器中输入localhost:8081/mysite, 就可以看到我们的hello world了^-^
    
    (4) 改进, 在mysite下创建login.pih, 可以参考Karrigell/webapps下自带的login.pih, 其中使用到form, 采用post方式, 发送请求到index.pih页面;
    (5) 修改index.pih, 接受login页面发送的Name, 判断并显示;
    (6) 完毕, 输入localhost:8081/mysite/login, 输入姓名和密码提交后, 就可以看到自己的名字了;
    (7) 当然还能改进, 就留待读者慢慢尝试了.


KDay2================================================================
#读取显示保存，MVC结构，Cheetah

== 问题描述 ==
    在前面章节练习mysite的基础上, 完成以下功能:  
    (1) 增加编辑页面(edit), 增加编辑输入框, 并保存入本地文件, 转入首页index显示刚刚输入的内容, 类似于制作博客的编辑页面;
    (2) 允许文章的多次修改及删除, 并实时体现在首页index中;
    (3) 提示: 可以利用本章学到的模板Cheetah制作显示首页, 各个文章可以保存为.cfg格式, 该格式文件的处理可参见ConfigParser的使用.

== 解答 ==

KDay3================================================================
#Karrigell_QuickForm/JVF

== 问题描述 ==
    在前面章节练习mysite的基础上, 完成以下功能:  
    (1) 利用Karrigell_QuickForm改写编辑页面(edit), 增加更多的文章属性, 如日期, 标签, 引用链接等;
    (2) 另外使用JVF, 依次校验用户输入的有效性;
    (3) 提示: 可以设计一个文章类, 多个文章对象可以利用pickle保存;
    (4) 另外, 读者可以尝试ks, 可以看一下源码, 不懂没关系, 下面章节还会讲到???.

== 解答 ==

KDay4================================================================
    session/HTMLTags/.ks

== 问题描述 ==
    在前面章节练习mysite的基础上, 完成以下功能:  
    (1) 首页进入编辑页面需判断是否已登录, 若没有则需登录, 登录后页面中....session???;
    (2) 通过各种HTMLTags美化首页显示;
    (3) 利用ks, 之后章节我们都利用ks来实现???
    (4) 提示: 

== 解答 ==

KDay5================================================================
#页面间

== 问题描述 ==
    在前面章节练习mysite的基础上, 完成以下功能:  
    (1) 在首页增加搜索框, 并实现博客搜索功能, 即输入关键字, 进行查找后得到各个文章对象并显示到结果页面中;
    (2) 能否优化我们现在的整个网站框架, 若能够则进行最大化的结构优化, 读者可以根据已经学到的知道自由发挥;
    (4) 提示: 

== 解答 ==

KDay6================================================================
#

== 问题描述 ==
    到目前为止, 我们已经实现了登录, 编辑, 显示, 搜索博客文章, 应该说作为个人博客已经差不多了, 当然我们还能继续扩展, 比如以下几点: 
    (1) 从单用户扩展为多个用户, 变为一个简单的博客系统;
    (2) 增加用户交互, 可以显示文章同时也可进行编辑并能实时反应所做的修改;
    (3) 页面的美化, 可以使用css;
    (4) 等等.

== 解答 ==

KDayN================================================================
#优化优化再优化

== 问题描述 ==
    读者做到这一步应该非常非常了解Karrigell的开发流程了, 接下来还是要对已有的web应用进行优化...这些只能通过自己不断的学习慢慢了解^-^

== 解答 ==
