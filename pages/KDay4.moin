## page was renamed from zhArticleTemplate
##language:zh
#pragma section-numbers on
||'''status'''|| 正式 || ZoomQuiet|| 完成度:95%||

[[TableOfContents]]

= KDay4: 使用KS模式重构代码 =

图 KDay4-1 当前开发成果在Leo 中组织的情景

attachment:KDay4-1.png 

小白回顾当前的成果,发现仅实现了三个小功能的原型就动用了 7,8 个文件...这也忒麻烦了,有些想念 CherryPy 的对象式应用发布了...

== 可爱的 session ==
'''今天,小白计划支持多用户和多问卷的问题,先从翻淘内置文档开始...'''
 * 首先要解决登录后的用户,在不同页面跳转时,系统知道用户的信息,貌似有关 session 的处理可以支持这种需要
 * 找到相关实例:
  * http://localhost/demo/ksTest.ks/index
 * 观察代码(小白追加了自个儿的评注):
{{{#!python
so = Session()
if not hasattr(so, 'x'):    # 判定 so 对象的 x ~计算属性是否初始化过
    so.x = 0
def index():                # 默认行为,展示所有操作
    print "x = %s" %so.x
    print '<br><a href="increment">Increment</a>'
    print '<br><a href="decrement">Decrement</a>'
    print '<br><a href="reset">Reset</a>'
    
def increment():            # 累加
    so.x = _private(so.x)
    raise HTTP_REDIRECTION,"index"  # 返回默认展示页面
def decrement():            # 递减
    so.x -= 1
    raise HTTP_REDIRECTION,"index"  # 返回默认展示页面
def reset():                # 置零
    so.x = 0
    raise HTTP_REDIRECTION,"index"  # 返回默认展示页面
def _private(x):            # 不可URL访问的支持函式
    """The function name begins with _ : internal function, 
    can't be call by a url"""
    return x+1
    }}} 不是吧!! 一个页面就作完了四种动作!完全是CherryPy 味的!!
    
 * 可以确认 Session 完全是对象了,而且标准的KarriGell 内置对象!
  * 但是,还是要在优雅的Python 脚本中掺杂HTML 代码,不爽直!

'''不过,相比使用 .pih和包含.py 的方式,使用 .ks 来进行页面组织,已经足够爽直了!'''
 * 但是使用 Cheetah 模板系统,就得每个访问页面都得有对应的模板声明来支持,好象也过于正统和麻烦了...
 
== HTMLTags ==
'''小白猛然发现有函式化的HTML生成机制!'''
 * 同样在 KarriGell 内置文档中:
  * http://localhost/doc/en/htmltags.htm
 * 唉呀呀!!还真的是心想事儿成! 从2.2 增加的新功能哪!
 {{{#!python
stylesheet = LINK(rel="Stylesheet",href="doc.css")
header = TITLE('Record collection')+stylesheet
title = H1('My record collection')
rows = Sum ([TR(TD(rec.title,Class="title")
                +TD(rec.artist,Class="Artist")) 
    for rec in records])
table = TABLE(TR(TH('Title')+TH('Artist')) + rows)
print HTML(HEAD(header) + BODY(title + table))
}}} 可以将一个标准的HTML页面由几行 Py脚本自然生成!
 * 那未,只要结合 KS 和 HTMLTags 功能就可以快速实现想要的复杂展示功能了!还可以方便的复用!
 * 当然的使用["Leo"] 八股化所有的.KS

图 KDay4-2
attachment:KDay4-2.png

  1. `<< page declarations >>` 将引用声明什么的都归整到一个节点中
  1. `<< htmlcode >>` 就是利用["Leo"]来快速复用的各种 HTML 代码
  1. `<<ini>>` 初始化部分,就是各响应页面都要使用的变量准备
  1. `@others` 包含以下各种实际运行的功能页面,包含:
   * `def action():` 样定义的实际响应页面
   * `def _function():` 可以反复调用的不作为页面响应的普通函式声明
  
== 登录 ==
改造思路就是:'''从默许的index 根据用户状态,自动导向 login 页面'''
 * 参考 session 例程中的相关代码{{{#!python
...
def increment():            # 累加
    so.x = _private(so.x)
    raise HTTP_REDIRECTION,"index"  # 返回默认展示页面
...
}}} 照猫画虎, 使用`raise HTTP_REDIRECTION,"login"` 来创立小白自个儿的智能导向登响应页面
{{{#!python
def index():
    << pagehead >>
    
    if sess.usr["name"]=="NULL":        # 查问 session 对象中的 usr 属性是否初始化过?
        raise HTTP_REDIRECTION,"login"
    else:
        pass
}}}
 * 当然的,要在 .ks 的 ini 初始化部分先声明会话容器:
     {{{#!python
# 使用 Session来记忆成员信息
sess = Session()
if not hasattr(sess, 'usr'):
    sess.usr = {"name":"NULL"}
    }}}在没有进行登录前,准备一个值为`NULL` 的`usr` 用户会话对象

 * 好了,实际的登录表单还是使用 [http://www.orionlab.net/karrigell_quickform/Karrigell_QuickForm.html KQF]来干:
{{{#!python
p = Karrigell_QuickForm('fm_login'
                        ,'POST'
                        ,'chkusr'
                        ,"登录自学问卷")
p.addHtmNode('text','uname'
             ,"staff帐号"
             ,{'size':40,'maxlength':8})
p.addGroup(["submit","btn_submit","提交","btn"]
           ,["reset","btn_reset","重写","btn"])
p.addRule('uname','required'
          ,"成员名是必须的!Login name is required!")
p.display()
}}} 非常简洁,齐整
 * 进行有效性判别的处理也是个标准的KS 函式{{{#!python
def chkusr(**args):
    """检查用户登录情况
    """    
    print QUERY
    sess.usr["name"] = QUERY["uname"]
    if sess.usr["name"] in pmguys:
        # pmguys 是个元组,预定义的有管理整理的成员帐号
        sess.usr["pm"] = 1
    print sess.usr
    #raise HTTP_REDIRECTION,"index"
}}}先别让页面自动跳走,看一看,是否如愿的将登录信息记录了？!

图 KDay4-3
attachment:KDay4-3.png 

 * 问卷的使用原则是,任何人都可以登录/回答,但是:
  1. 只有有效的成员问答才会统计
  1. 只有个别的成员才有管理/编辑问卷的权限
  
 
== 多问卷选择 ==
'''有了登录后的用户信息,就可以根据不同的角色进行处理了'''

=== fnmatch ===
 * 指定目录中某模式的所有文件的寻找…………
 * 有内置的处理模块哪!'''fnmatch'''
 * 配合统一设置进行搜索{{{#!python
qcfglist = []
for f in os.listdir(conf.qpage.qpath):
    if fnmatch.fnmatch(f, '*.cfg'):
        if ("__init__" in f):
            pass
        else:
            qcfglist.append(f)
print qcfglist
}}} 就可以找出目录中所有以`.cfg`结尾的文件!
  * conf 对象是新发布模式下的统一设置信息对象
   * 因为,担心可能需要多个.KS 文件来组织网站,不想象原先那样滥用["Leo"]来复用信息了
   * 所以,建立`@nosent questionnaire.cfg` 统一配置文件
   * 这样,`conf = DictIni("questionnaire.cfg")` 一下子,就可以在所有.KS 页面中获取统一的站点设置了
   
=== 列表所有问卷 ===
'''根据问卷的状态进行归类列表'''
{{{#!python
# 识别问卷发布情况::
qdone = {}
qdoing = {}
qdesign = {}
for p in qcfglist:
    cfgp = DictIni(conf.qpage.qpath+p)
    if 0==cfgp.desc.done:
       qdesign[p]=cfgp
    elif 1==cfgp.desc.done:
       qdoing[p]=cfgp
    elif 2==cfgp.desc.done:
       qdone[p]=cfgp
    else:
        qdesign[p]=cfgp
}}} 使用不同的字典容器先过滤一下子搜索出来的文件;
 * 然后使用类似的输出就好:
{{{#!python
print H4("问卷进行中::")
print UL("".join([str(LI(
             B(A(qdoing[i].desc.pname
                 ,href="page?qpname=%s&do=doing"%i.split(".")[-2])
                 )+
                 SUP(qdoing[i].desc.learn)+
                 SUB(A("问答统计",href="stat?qp=%s"%i))
                         )
                        ) for i in qdoing.keys()
                    ])
                    )
}}}     

图 KDay4-4
attachment:KDay4-4.png

== 小节 ==
 * 实际上,本日,小白使用 .ks 体验了一把函式化的页面发布,成果就一个脚本'''index.ks'''
  * 但是以前完成的`.pih` 依然好用,而小白将趁兴将它们都重构为更加爽快的'''函式化页面发布'''
 * 而且,小白忍不住对CSS进行了深入的定制,在输出代码的最简和页面表现丰富之间进行了有效的探索
 
 
=== 明日任务 ===
'''心情舒畅!快速的完成了更加简练的功能页面!'''
 * 但是,如何将编辑,回答,统计融合起来？
  1. 点击进入不同问卷,可以回答/或是编辑
  1. 点击编辑就直接编辑
  1. 提交就成为新版本问卷
  1. 问卷要有版本管理
  1. 提交后,可以立即回到问答或是问卷集首页
  1. 任何页面都有安全退出的链接
  1. .... 呜乎哀哉,好象越作越多了,任务…………
 
== 实例下载 ==

使用SVN下载地址:
 * http://openbookproject.googlecode.com/svn/trunk/LovelyPython/KDays/kday4

== 练习 ==

    在前面章节练习mysite的基础上, 完成以下功能:  
 * (1) 我们在学习了.ks之后, 将原来的mysite改写成函式化页面发布, 这样我们只需一个index.ks文件就可以完成之前index.pih和edit.pih两页面的功能;
 * (2) 增加用户登录, 验证和登出功能, 即实现用户通过输入姓名和密码, 提交后通过验证后登录首页; 具体可参考png中截图;
 * (3) 使用HTMLTags美化首页显示, 读者可以展开自己丰富的想象力那;

----
返回 [:ObpLovelyPython/KDays:KDays实例故事]

::-- ZoomQuiet [[[DateTime(2005-12-11T04:45:50Z)]]]

[[PageComment2]]


