##language:zh
#pragma section-numbers off
##含有章节索引导航的 ZPyUG 文章通用模板
[[TableOfContents]]
## 默许导航,请保留
[[Include(ZPyUGnav)]]


= [LovPy]moin文本排版指南 =
`根据和编辑MSN 的沟通结论，快速组织指南给美术编辑使用` ~ 注意，可使用底部的注释框随时反馈沟通!
##startInc

== 交付和排版流程 ==
 原先编辑习惯排版流程::
  1. 作者提交有排版效果的 word 文档,保证文字/图片/代码质量,以及排版的基础效果
  1. 编辑協同美术编辑,在作者排版上进行增补,沟通意见,确认几个经典章节的`基准排版`效果;同时完成所有文字/文法/出版校对
  1. 将原稿和 `基准排版`章节文档,交付专业的排版公司,使用专业排版软件进行精排
  1. 排版小样出来后,编辑核对,确认后,转交印刷厂照排付印
 当前社区模式的建议流程::
  1. 社区提交无排版效果的纯文本/代码/图片,保证文字/图片/代码质量;前同时提供网络版本的维基页面,以及排版建议
  1. 编辑協同美术编辑,在理解`纯文本`(结构化文本)/代码/图片基础上,`参考维基页面`(不要直接使用维基页面来排版!)完成所有文字/文法/出版校对;然后统一初排成所有章节的`基准排版`文档
  1. 将原稿和`基准排版`章节文档,交付专业的排版公司,使用专业排版软件进行精排
  1. 排版小样出来后,编辑核对,`和社区共同确认后`,转交印刷厂照排付印

== 当前SVN目录使用 ==
'''所以,交付的文件以SVN仓库中的为准,在正式交付时,将提供一个版本号[changeset],作为约束,从该指定版本号检出的SVN内容是最终交付稿件!'''

下载URL：
http://openbookproject.googlecode.com/svn/trunk/LovelyPython/
{{{
./
|-- CDays           (CDays 实例故事代码)
|   |-- cday-1      (按照章节对应分立子目录收集)
|   +-- ..
|-- KDays           (KDays 实例故事代码)
|   |-- js          (共同JS表单验证模块)
|   |-- kday1       (按照章节对应分立子目录收集)
|   +-- ..
|-- PCS             (Python Cheat Sheet ~ Python 作弊条 内容)
|   |-- pcs-0       (按照章节对应分立子目录收集)
|   +-- ..
|-- exercise        (各章练习，按照章节对应收集)
|   |-- part1-CDays (CDays 实例故事练习，按照章节对应收集)
|   |   |-- cday-1  (按照章节对应收集)
|   |   +-- ..
|   |-- part2-KDays (KDays 实例故事练习，按照章节对应收集)
|   |   +-- ..
|   |-- part3-PCS   (PCS练习，按照章节对应收集)
|   |   +-- ..
|   `-- part4-Attach(附录练习，按照章节对应收集)
|       +-- ..
`-- pages           (图书主体正文 .moin 文本目录)
    |-- 4editor     (正文无关:图书编辑参考维基页面文本)
    |-- attachments (图书主体正文 对应各章附图/文)
    `-- reST        (正文无关:图书主体正文旧 reST格式文本)
}}}
== moin 文本排版 ==
由于SVN中提供的是无排版的纯文本,所以:
 * 针对其的 `基准排版` 由美术编辑`在理解后`,自主进行; 
 * 除文字/代码/图片外一切图书排版,由编辑发挥专业素养主动进行,社区不进行干扰
 * 社区提供对应的 电子版本的维基页面(绝对相同的内容) 来进行对照/提示/参考

`但是，基于长期的图书体验，社区谨提出以下排版建议`
=== 字体建议 ===
`本着技术阅读的体验，强烈建议排版时注意技术文档的字体！`
 参考:: 
  * 程序员最喜欢用的编程字体 http://www.2maomao.com/blog/best-programmer-fonts/
   * 字体效果对比 http://www.lowing.org/fonts/allfonts.htm
 建议::
  * 所有文字必须使用等宽字体!否则以下情况将无法对齐!!!
  attachment:2008-06-17-155149_319x149_scrot.png
  
  * 所有E文使用 MONACO
   * 下载: http://www.pa.msu.edu/ftp/pub/misc/tek-phaser/ttfonts/MONACO.TTF
  * 所有中文使用 圆体
   * 常见黑体显示效果对比 http://www.osxcn.com/ubuntu/heiti-contrast.html
   * 可以看到等宽字体中,只有 `Vera Sans YuanTi Mono` 在各种字体中都可以得到均匀清晰的效果
   * 下载: http://download.coolcode.cn/vera-sans-yuanti.tar.gz
   
=== 代码颜色 ===
`本着技术文档阅读的体验，强烈建议排版时注意代码颜色！`

社区负责 文字/代码/图片 的质量,而编辑排版时,对代码更加要精确的再现,否则后果不言而喻!

 Python 代码排版要求:
   * 缩进空格是精确对应的(这和语法是绑定的如果缩进有问题,将无法运行!)
   * 每层缩进 建议是 `4个半角空格`

 Python 代码颜色要求:
   * 如果使用白底,则直接使用 维基的页面效果 如下:
{{{#!python
# coding : utf-8
import os
for root, dirs, files in os.walk('/media/cdrom0'):
  print root,dirs,files
}}}
   * 如果使用深色底,则直接使用Vim效果 如下:
   attachment:2008-06-17-154617_626x272_scrot.png
   * 或是 '''gedit''' 效果:
   attachment:2008-06-17-154746_733x428_scrot.png
   * 总之,根据白底的语法着色,美观,合适的将代码的关键字/字串 标志出来
   * 其它 M$ 下面的各种编辑环境,只要支持语法着色的都可以!
   

=== 版式/空间 ===
`本着原版图片阅读体验，强烈建议排版时注意页面的行间/页眉/页脚/页边 的设计!`

建议参考 O'REILLY 图书 ''' "[http://www.douban.com/subject/1395497/ MIND HACKS]" ''' 的设计对图书的各个内容块进行排版设计!


== moin 内容块识别 ==
虽然提供的是纯文本,但!其实是 MoinMoin 维基格式的结构化文本! `本身已经非常非常非常明确的将内容块的关系/结构表述清楚了!`
 * '''超级无敌坚决建议''''编辑们稍微学习一下 维基的语法就对 `.moin` 的结构化文本了若指掌了!
 * 在图书撰写过程中,我们也特别注意,进行了非常小心的组织,没有使用过多的维基技巧,仅仅几类最最基础的结构化文本规则
 * 详细的维基语法帮助: '''[http://wiki.woodpecker.org.cn/moin/%E5%B8%AE%E5%8A%A9-%E7%BC%96%E8%BE%91 帮助-编辑]'''
 
 提醒::
  * .moin 结构化文本仅仅提供了 正文内容,章节结构,各种内容块标识, 但是不包含显示效果!
  * 编辑得根据文本中通过简单的字符串聲明来标识的内容块,一一设计出统一的排版效果进行逐一排定!
 
`以下给出常见的结构化文本说明`
=== 标题 ===
维基中使用 单独行中前后的 `=` 进行标题/章节的聲明
{{{
= 大标题 =
== 二标题 ==
=== 三标题 ===
= 大标题 =
}}}

解析输出如下:
----
= 大标题 =
== 二标题 ==
=== 三标题 ===
= 大标题 =
----

 注意::
  当然正文中可能有四级/五级标题的情况,但是不建议机器的照搬使用;

=== 列表 ===
维基中使用 `*` 或是  `1.` 以及前面的`半角空格`数目,來组织不同级别的列表
例:
{{{
 * 普通列表
  * 子条目
   * 再次条目
   * 再次条目
  * 子条目
 * 普通列表

 1. 数字列表
  1. 子条目
   1. 再次条目
   1. 再次条目
  1. 子条目
}}}
以上文字将解析成:
 * 普通列表
  * 子条目
   * 再次条目
   * 再次条目
  * 子条目
 * 普通列表

 1. 数字列表
  1. 子条目
   1. 再次条目
   1. 再次条目
  1. 子条目

 注意::
  * 在维基中,为了表述方便,可能大量使用简便的列表来罗排叙述
  * 但是在图书中,请编辑主动根据正文内容,自主决定是否使用列表来体现

=== 引用 ===
维基中使用 `{{{` 和`}}}` 包围来声明是引用内容块!
 * 即! `{{{` 和 `}}}` 并不是正文内容,`请不要进行排版!`直接清除就好,
 * 另外 `{{{#!python` 表明引用的内容是Python 代码,从而进行自动的语法颜色渲染,以及追加行数效果,如:
{{{#!python
# coding : utf-8
import os
for root, dirs, files in os.walk('/media/cdrom0'):
  print root,dirs,files
}}}
 `注意`:
  * 此时维基页面中的`切换行号显示` 也是自动内容,不是正文, `请不要进行排版!清除即可;-)`

=== 表格 ===
维基中使用 `||` 快速声明简单表格:
{{{
|| 表头0|| 表头1|| 表头2||
|| 表行1|| 表列1-1|| 表列1-2||
|| 表行2|| 表列2-1|| 表列2-2||
}}}

解析输出成:

|| 表头0|| 表头1|| 表头2||
|| 表行1|| 表列1-1|| 表列1-2||
|| 表行2|| 表列2-1|| 表列2-2||

 注意::
  * 请编辑对照维基效果,进行决定表格形式
  
=== 宏 ===
维基中为了扩展内容的组织正式,有特殊的行为支持,称作`宏` ~ 所有以 `[[宏名称()]]` 方式組織的文本都是有特殊含义的,不能直接来排版!

MoinMoin 支持很多`宏` 最常用的如下:

==== 脚注 ====
在正文的任意地方出现类似文字:
{{{
[[FootNote(脚注 文字,自动序号出现在页面底部)]]
}}}
将解析输出为[[FootNote(脚注 文字,自动序号出现在页面底部)]]

 注意::
  * 排版时只要将 脚注序号插入正文对应处,在`FootNote()` 中的文字,应该排版到页面底!


==== 包含 ====
在正文的任意地方出现类似文字:
{{{
[[Include(ObpLovelyPython/CDay1/new)]]
}}}

含义就是在此处将 http://wiki.woodpecker.org.cn/moin/ObpLovelyPython/CDay1/new 页面的所有内容输出;
效果如下

[[Include(ObpLovelyPython/CDay1/new)]]

 注意::
  * 末尾的细线,以及`{ObpLovelyPython/CDay1/new}e` 都是自动生成的提示操作链接,`请不要进行排版!清除即可;-)`

=== 网络元素 ===
为了保证维基文章有网络图书的特性,在正文的头尾有一些通用的内容元素声明,以便形成友好的阅读环境,
但是,编辑要有所识别,`请不要进行排版!清除即可;-)`

{{{
##language:zh
#pragma section-numbers on

||'''status'''|| 校对  || ZoomQuiet || 100% ||

[[TableOfContents]]

...

## 设计实用练习,确保体例代码可以自由扩展出各种实用应用!

...

----
::-- ZoomQuiet [[[DateTime(2007-04-13T16:17:50Z)]]]
[[PageComment2]]
}}}

以上都是最常见的网络内容元素,`请不要进行排版!清除即可;-)`

##endInc

----
'''反馈'''
`其它末尽.moin 结构化文本的聲明含义,请随时在 zeuux-press 列表沟通确认!`

创建 by -- ZoomQuiet [[[DateTime(2008-06-17T02:33:37Z)]]]
||<^>[[PageComment2]]||<^>[:/PageCommentData:PageCommentData]''||

