##language:zh
#pragma section-numbers off
## ~ 配合增补内容不断调整ing..
||'''status'''|| 正式 ||ZoomQuiet;100%||

[[TableOfContents]]


##startInc

= 书序 =

`Python` 是蕴含快乐编程思想的奇妙脚本语言,但是在中国程序员世界里并不为人所知,原因有很多;
本书试图使用一种比较草根的沟通形式来宣传推广这一美好的语言,决不教条或对比贬低其它"热门/主流"语言;-)


== 动机 ==

'''一个人如果力求完善自己,就会意识到,为此也必须同时完善他人. 一个人如果不关心他人的完善,自己便不可能完善. '''
~ 这是从一位教育研究者的个人Blog中看到的;
{{{注意::
北京师范大学 庄秀丽 老师;
访问地址: http://wiki.woodpecker.org.cn/moin/SkSig/ruminant/CompletSelf
精巧地址: http://bit.ly/15aDa
}}}
在自学并进而喜爱上这门动态脚本语言的过程中,笔者深切的体验到这句话的内涵. 

所以,一有成书的机会,立马纠集一批行者将真实的日常需求开发切身体验,组织起来,尝试使用一个个简单实用的代码片段来直觉的表现Python 的美好;

{{{脚注::
名词解释:行者
(1)∶佛教语. 即“头陀”. 行脚乞食的苦行僧人;又指方丈的侍者及在寺院服杂役尚未剃发的出家者 
(2)∶泛指修行佛道之人 
(3)∶《西游记》中孙悟空的别名
在啄木鸟Python技术社区
http://wiki.woodpecker.org.cn/moin/WoodpeckerHackers (精巧地址:http://bit.ly/TUzr3)
被借用成为Hacker 的中文专用词,
意指在自由软件技术世界不断探寻前行的学习者...
}}}

 * 如果可以令读者认同并开始学习使用Python,善之善也;
 * 如果现在没有感觉,但是得个印象－－Python 是个好学易用的工具性开发语言,亦之善也;
 * 就算读者最后对Python 依然无视,可也开拓了视野,知道世界上不仅仅只有C++和JAVA语言,在今后的学习/工作中也开始关注不同与主流的更加敏捷的解决方案来,善也亦是;-)


"Lovely Python--初学者极速入门故事" 将是一本轻松的故事书,我们力图使用直觉式的实例结合精简的代码串联起最常用的语法和技巧,可以在愉快的阅读过程中体验基本的Python 开发技术/技巧/技艺...

为了节约读者的时间,本书力图将内容组织成类似"老友记"式的单元剧,每一章节都可以独立参阅,所有知识点处都给出恰当的延伸阅读指引--就象网页,将图书按照网站的方式来进行组织;而内容中心仅仅是使用Python的愉快体验!

所以本书不是教材,请不要试图通过本书成为合格的Python程序员,但是应该可以透过本书成为Python 的FANs ;-)

=== 为什么要学习Python? ===
 * Ruby 不好嘛?Perl 不够用嘛?JAVA 还不够强大嘛?
 * 脚本语言运行的很慢吧?
 * ...

嗯嗯嗯,这将是从来没有听说过Python 的读者的第一个反应,毕竟从来没有在主流媒体中听到过这一语言哪,,,
也可能就是在受到周围同学/同事/朋友教唆使用Python 时的第一个念头,,,

好吧,本书不力图解答这类问题,只是期望当读者不知不觉中能够使用Python轻松的快速解决日常问题后,自个儿就可以给出个说法;-)


=== 目标读者 ===
 本书假设读者有如下基本技能::
  * 英文1.618级 -- 认26字母,会查字典,有基本1024个单词量,可以使用简单的 Cnglish 同外国友人沟通
  * 有至少一种计算机语言的编程经验,从 JavaScript 到 JAVA 任何一种类型的计算机语言都可以

 本书假定读者有如下希求::
  * 期望有种工具语言可以快速解决日常的一些处理工作
  * 期望有种快速语言可以立即验证自个儿的想法
  * 期望有种敏捷语言可以快速完成系统原型进行印证
  * 期望有种胶水语言可以平滑的将旧有的各种系统统合在一起
  * 期望...


`那么,尝试一下Python 吧!`, 我们尽力将各自在不同行业情景中喜欢上Python 的那种感觉传达给具有丰富好奇心和学习全新技术勇气的读者.

== 内容组织 ==

因为本书的内容主要来自CPyUG社区的邮件列表讨论,虽然已尽可能的让各方面的叙述完整无缺,但是笔者们都不是什么作家,完全是因为对Python 的热爱而组织起来,期望同中国的程序员们分享一下自个儿的快乐;
所以,各种论述都带有很强烈的感情因素,而且因为篇幅所限无法深入讨论到Python 的各种高级特性上去;
所以,对于真正的高人,本书最多是个散文的随想录了;

因为Python 语言本身是种非常灵活的动态脚本语言,同一个目标可以使用多种方式完成,笔者们为了各种不同技术背景的读者可以快速无碍的理解,可能选择了种实际上比较笨拙的方式来实现功能,聪明的读者一定可以看出来的,那么请会心一笑,因为您已经和我们一样棒了!

本书是开放的,永远接受各种建议,看不过眼的聪明的读者可以直接在本书的专用邮件列表上进行交流,这样也许下一版的图书就有你的贡献了.

=== 本书结构 ===

本书主要内容分成四部分:

 第一部分 CDays 光盘实例故事::
  * 根据设定的自制光盘管理软件的剧情,分成10日讲述使用Python 从无到有自在的创建自个儿中意的软件的过程
    1.  CDay-5 Python初体验和原始需求; ^描述小白是如何遇见Python 并开始怎样的初体验,并产生了原始的开发需求^
    1.  CDay-4 可用的首个Python脚本; ^描述如何利用Python 开展开发/测试的实用思路^
    1.  CDay-3 通过函式进行功能化; ^只要掌握一丝技术,Python 就可以帮助你快速完成切实的功能^
    1.  CDay-2 利用文本文件完成核心功能; ^紧抓需求,根据积累和沟通,完成想要的功能^
    1.  CDay-1 中文处理完成功能的实用化; ^中文问题是一切中国程序员躲不开的,好在Python 支持的非常好^
    1.  CDay 0 感受软件工程进行发布的准备; ^有了成果就要发布,但是软件的发布是有规则的--Python 同样有相关的支持^
    1.  CDay+1 首次重构优化数据结构; ^对自个儿永远要高标准严要求,优化是开发的永远主题^
    1.  CDay+2 用户界面友好化; ^软件是不一定是给专业程序员使用的,普通用户的体验也要关注^
    1.  CDay+3 应用多线程再次优化; ^高级特性粘点儿边的优化^
    1.  CDay+N 基于Python的无尽探索; ^嗯嗯嗯!一切仅仅是开始....^
  * 代码下载: http://openbookproject.googlecode.com/svn/trunk/LovelyPython/CDays/
   * 精巧地址: http://bit.ly/1IWqQW
  * 练习题解答: http://openbookproject.googlecode.com/svn/trunk/LovelyPython/exercise/
   * 精巧地址: http://bit.ly/2GtIPI

 第二部分 KDays 实用网站开发故事::
  * 讲述如何 Pythonic 的运用即有框架在网络中解决实际问题;
  * 代码下载: http://openbookproject.googlecode.com/svn/trunk/LovelyPython/KDays/
   * 精巧地址: http://bit.ly/6fAUg

 第三部分 Py初学者作弊条汇集::
  * 同Py日实例故事呼应,以精简模式讲述各个关键语言知识点;并提供各种实用代码片段;
  * 分成以下几篇:
   1.  环境篇 ; ^分享各种Python常用环境的使用技巧^
   1.  语法篇 ; ^说明Python 语言最基础也的语法点^
   1.  模块篇 ; ^分享故事中涉及的各种常用模块的使用^
   1.  框架篇 ; ^介绍流行的几个Python Web应用框架^
   1.  友邻篇 ; ^分享一些在Python 开发之外的相关领域基础知识^
  * 代码下载: http://openbookproject.googlecode.com/svn/trunk/LovelyPython/PCS/
   * 精巧地址: http://bit.ly/1IWqQW

 第四部分 附录::
  * 对以上所有内容的再回顾,方便读者使用不同的顺序和逻辑进行快速查阅(不是骗稿费哪;-)补充大量的实用代码片段以及更加丰富的外部资料来支撑快乐开发这一体验!

    1.  资源索引 ; ^本书以外的优秀资料链接和精简评述^
    1.  行者箴言 ; ^行者们的言论...包含很多靠谱的经验的,不听白不听;-)^
    1.  练习解答 ; ^实例故事中提及的各种练习的代码解答^
    1.  术语索引 ; ^面对全新的动态对象脚本语言,不是各种术语是可以快速理解的,这里行者们尝试快速解说一下^
    1.  后记故事 ; ^社区行者和出版编辑接触后发生的各种故事^



== 本书阅读技巧 ==
'''Pythonic''' ; '''K.I.S.S''' ~ 是本书特别想分享给大伙的真正好东西:

 Pythonic::
    * -- 简单的说就是使用Python 的思维去解决问题的态度,记住Python 就是Python, 如果你拿JAVA 的思路和方式来使用Python 不是不可以,而是会得不偿失的...详细的,大家跟着内容蹓一圏,再和以往使用其它语言解决类似问题时的过相比较就知道了 ;-)
    * 本书不是教材,不要期望可以根据本书泡制出考试大纲来获得什么认证
    * 现实生活中的各种需求,不会根据教材的编制来要求的;所以,一切从需求出发,关注数据的处理,快速使用即有功能来完成愿望才是 `Pythonic` 的真髓!


 K.I.S.S::
    * ''' Keep It Simple , Stupid '''~ `保持简单`! 不是大家首先想到的那什么...
    * 期望大家看过本书后,真正领会到 `K.I.S.S` 精神,并自觉的应用在各个方面
    * 首先要应用在本书的快速学习中接受 `学立用` 的态度,不建议全面系统的学习 `这样的效率才最低`
    * 作好非线性学习的心理准备:

 阅读态度建议::
 学习Python 不是什么大事儿 -- 和学习自行车类似,千万不要用学汽车的劲头来学习自行车:"非要先会拆修自行车了才敢骑行" -- 非要将Python 的所有语法规则学完之后才敢真正使用Python 来解决实际问题; 反了!其实这才是本末倒置的
  1. 记住学习的目的就是要解决实际问题,如果一个语言的技法看不出与你现在的问题有关,就先甭理她! 看的多用的多了自然就会在合适的时机使用了,真的! ~ 这和学习英语时所谓“语感”类似的;)
  1. 跟着实例故事走,不要想当前问题以外的事儿,依照眼前问题的解决顺序来逐步学习--虚无缥缈的语法规则是最难记忆的,只有和具体问题的解决绑定,才记的牢!
  1. 看似零散的知识点,其实都是相通的,好比任何计算都可以归结为加减运算一样,不论多高深的技法,都可以使用粗浅直白的代码来完成相同的工作, **任何简陋但是可运行的代码,都比精致美观但是无法运行的代码要好!** 
   * 所以,背好唐诗三百首,不会作诗也会吟! 背好英语900句,不会作文也得分!
   * 甭非想着要跟着一个完美的教程走完才可以成为Pythoner; 其实常见问题的处置代码看熟了,想不会写Py脚本也难了!

=== 本书行文体例 ===
本书使用不同的体例来区分不同的情景,当读者习惯它们时,将能够更加轻松的获取感兴趣的咨询. 

 程序体例::
  * 使用带有行数的代码引用{{{#!python
def foo():
    print "Love Python, Love FreeDome"
    print "E文标点,.0123456789,中文标点,. "
}}}


 字体体例::
  * 正文: 圆体 "Vera Sans YuanTi Mono" 等宽字
  * 代码: Monaco 有灰底色 细边框 行号,例如:{{{#!python
def foo(x):
    return x*x
print map(foo, range(10))
}}}
  * 旁注: 楷体 有边框效果 前导符号 出现在旁白/页脚

 文本体例::
  * 知识点引用:
{{{详细::
表示以下内容出现在边条中
将涉及内容指向后面的 `PCS*`
请编辑设计明确的图标来引导
}}}
  * 技巧警示:
{{{注意::
表示以下内容出现在边条中
包含警告事项,可能涉及内容会指向后面的 `PCS*`
请编辑设计明确的图标来引导
}}}
 * 附加说明:
{{{
脚注:: 
表示以下内容出现在脚注中
包含题外的信息,笔者心路,等等和正文有关,
但是不直接的信息
请编辑设计明确的图标来引导
}}}

 精巧地址::
  本书包含很多外部网站的URL地址,但是图书必竟不是网页,读者可以轻易的点击进入相关网站进行深入阅读,所以,笔者尝试使用URL精简工具来帮助读者可以快速输入自动跳转到原有网站来访问;
  * 比如说: 本书的维基入口 http://wiki.woodpecker.org.cn/moin/ObpLovelyPython
  * 精巧地址: http://bit.ly/2QA425
  * 输入的字符量少了三倍! 这是借助 http://bit.ly 网站提供的网址精简服务达到的效果;
  * 提醒:毕竟这是借用外国的免费服务进行的精简,如果读者输入后不能自动跳转的话,可能是网络问题也可能是服务问题,那就只能麻烦读者重新使用原有的URL进入了;



##endInc


-- ZoomQuiet [[[DateTime(2007-02-19T08:10:27Z)]]]

[[PageComment2(nosmiley=1, notify=1)]]

