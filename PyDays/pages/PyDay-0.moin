##language:zh
#pragma section-numbers on
||'''status'''|| 草稿  || ZoomQuiet || 完成度 80%;等待文档的输出效果||

[[TableOfContents]]

= PyDay 0 时刻准备着!发布 =
## 一句话本章精要
`发布!为了全人类!`
 * 因为'''一个人如果力求完善自己，他就会看到，为此也必须同时完善他人。一个人如果不关心别人的完善，自己便不可能完善。'''
 
== 从需求导出用户群 ==

小白已经实现的功能:
 1. 扫描光盘内容并存储为硬盘上的文本文件
  * 存储成*.cdc 的文本文件
  * 可以快速指定保存目录 
  * 可以快速指定保存的文件名
 1. 根据储存到硬盘上的光盘信息计件进行搜索
  * 可以搜索指定目录中所有*.cdc文件
  * 可以指定关键字进行搜索
   * 列出所有含有关键字的信息行

对于大胆并逐渐习惯命令行界面的小白,现在的 PyCDC 基本可用了,那么这样的小工具,有什么哪的人愿意使用?

推想一下:
 * 有很多光盘的人
 * 知道并会安装Python 的人
 * 不惧怕命令行的人
 * 勇于尝试的人

这样的人也必定是愿意分享的人,小白当然在行者多日的熏陶下，刚刚完成 可用的PyCDC 就想汇报给列表中的先辈们，获得夸奖，
更加希望有人通过使用反馈意见，甚至于代码，可以将这首个作品发展下去；

所以要发布！

== 发布的本质 ==
'''发布好象不是通告一嗓子就好的事儿'''

=== 给人用 ===
小白尝试将 PyCDC 整理了个压缩包发送给朋友，结果所有的朋友都说不会使用...郁闷是小白的真实写照;

询问列表:"怎么发布软件哪?!"

回复:"文档!文档!文档!"

==== 文档! ====
'''分分分!学生的命根! 文档,文档,文档!软件的颜面!'''

 * 软件是给人使用的,但是你无法跑到每个愿意尝试使用软件的人的身份进行演示,如何使用你的软件吧?!
 * 所以,文档!友好的文档!清晰的文档!有效的文档! 就是作者的代言人,形象大使,作为尝试者的向导,来令他人学习使用你的软件
 * 对于源代码发布的自由软件,代码也是文档的一部分,乱七八糟的代码,是没有人有兴趣试用的

=== 再次开发 ===
所以,发布意味着针对你期望的用户再次开发!
 * 标准的自由软件包应该有哪些文档? 
  1. AUTHORS    作者自述
  1. LICENSE    许可证类型(Python 世界喜欢简单的BSD系列许可证)  
  1. README     软件说明
  1. ChangeLog  修订历史
  1. PKG-INFO   包信息 提供给一些自动程序使用

都是必须的类似八股文的....

 * 更加重要的,小白对自个儿经过反复尝试总结出来的多个小巧核心功能,至少有以下函式是非常期望有人可以重复使用的!
  * `cdWalker()`
  * `cdcGrep()`
  * `_smartcode()`
 * 那么如何更好的说明如何单独使用这些函式,而且又可以方便的随着代码的变化而维护?
 * 再问,原来这叫`文档化开发` -- 将软件API文档同代码结合起来写,写代码的同时也完成了文档
 * 方法就是利用注释!

==== epydoc ====
'''Easy Py Documentor ''' -- 轻松的Py文档生成器! 
 * http://wiki.woodpecker.org.cn/moin/CodeCommentingRule


== 引发的改进 ==

=== 函式命名的合理性 ===
自个儿之前随手命名的函式，在注释中，前后看起来并不顺畅，回想一路使用着的 Python 内置函式命名:
 1. os.listdir()
 1. os.walk()
 1. encode()
 1. open().write()
 
是多么的直接哪，果然，命名也是大学问:
 * [http://wiki.woodpecker.org.cn/moin/PythonCodingRule Python开发编码规范]
 * 简单说就是要应用先人们在大量代码编写中摸索出来的规范，可以令任何人快速在代码中区分出各种关键变量／类／函式等等
 * 原则，小白现在可以理解并习惯的
  1. 各种命令尽量使用动宾式短语
  1. 目录／文件名全部小写
  1. 类名使用 首字母大写单词串(`WikiNames`)
  1. 全局变量使用 全大写字串(`CAPWORD`)
  1. 函式 使用混合大小写串 (`mixedCase`)
  1. 内部变量，常数 全部小写
 * 综合应用就形如
{{{#!python
from mypacket inport MyClass
GLOBALVAR="是也乎"
def doInsert(arg):
    MyClass.myFunc(GLOBALVAR)
}}}

所以，小小修订一些变量／函式的命名更加贴切是作者在发布前的礼貌！？
 * `cdctools._smartcode(stream)`-> `cdctools._smartcode(ustring)`
 * `codedetect = chardet.detect(ustring)["encoding"]`->`codename`

=== 搜索输出文本的改进 ===


== 小结 ==
## 总体语法等等叙述,注意给出相关知识的阅读指导


==== distribute ====
[http://blender.bokee.com/523381.html 如何“编译”Python程序] ^ Oyster <lepto.python@gmail.com> 建议^

== 练习 ==
## 设计实用练习,确保体例代码可以自由扩展出各种实用应用!

----
::-- ZoomQuiet [[[DateTime(2007-04-13T16:14:09Z)]]]
[[PageComment2]]

