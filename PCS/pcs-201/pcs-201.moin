##language:zh
##OBP项目图书reST通用文章模板
###format rst
||status|| 草稿 ||清风; 100%||

[[TableOfContents]]
##startInc
== 概述 ==
cmd模块为命令行接口(command-line interfaces , CLI)提供了一个简单的框架. 它经常被用在 pdb模块中,当然也可以在自己的程序中使用它.

== 使用 ==
{{{#!python
import cmd
import string, sys

class CLI(cmd.Cmd):

    def _ _init_ _(self):
        cmd.Cmd._ _init_ _(self)
        self.prompt = '> '    # 定义命令行提示符

    def do_hello(self, arg):   # 定义hello命令所执行的操作
        print "hello again", arg, "!"

    def help_hello(self):        # 定义hello命令的帮助输出
        print "syntax: hello [message]",
        print "-- prints a hello message"

    def do_quit(self, arg):     # 定义quit命令所执行的操作
        sys.exit(1)

    def help_quit(self):        # 定义quit命令的帮助输出
        print "syntax: quit",
        print "-- terminates the application"

    # 定义quit的快捷方式
    do_q = do_quit

# 创建CLI实例并运行
cli = CLI()
cli.cmdloop()
}}}从这个小例子可以看出.定义一条命令,如command,只需要在CLI类中增加一个do_command函数,而该命令对应的帮助信息由help_command函数给出.所以使用`cmd.Cmd`类编写命令行处理程序是非常容易.运行上述例子,可以进入如下的命令行:
{{{
$ python pcs-201.py 
> ?

Documented commands (type help <topic>):
========================================
hello  quit

Undocumented commands:
======================
help  q

> help hello
syntax: hello [message] -- prints a hello message
> hello LovelyPython
hello again LovelyPython !
> find
*** Unknown syntax: find
> q
}}}就像示例中所写的那样,自定义的CLI类提供了`hello`和`quit`命令,可以正常使用它们,而`find`命令是没有定义的,所以命令行提示为未知语法.

##endInc

-- 清风  [[DateTime(2008-04-25T14:33:00Z)]] 
